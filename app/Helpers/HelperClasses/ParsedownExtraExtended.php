<?php
/**
 * Created by PhpStorm.
 * User: kduma
 * Date: 02/03/15
 * Time: 02:08
 */

namespace App\Helpers\HelperClasses;


use ParsedownExtra;

class ParsedownExtraExtended extends ParsedownExtra {

    /**
     * @var bool
     */
    private $pdf;

    function __construct($pdf = false)
    {
        parent::__construct(); // TODO: Change the autogenerated stub
        $this->pdf = $pdf;
    }

    protected function unmarkedText($text)
    {
        $text = parent::unmarkedText($text);
        if (isset($this->DefinitionData['Abbreviation']))
        {
            foreach ($this->DefinitionData['Abbreviation'] as $abbreviation => $meaning)
            {
                $pattern = '/\b'.preg_quote($abbreviation, '/').'\b/';
                if(!$this->pdf)
                    $text = preg_replace($pattern, '<abbr title="'.$meaning.'">'.$abbreviation.'</abbr>', $text);
                else
                    $text = preg_replace($pattern, '<abbr title="'.$meaning.'">'.$abbreviation.'</abbr><indexentry content="'.$abbreviation.'"/>', $text);
            }
        }
        return $text;
    }

    protected $footnoteCount = 0;

    protected function inlineFootnoteMarker($Excerpt)
    {
        if (preg_match('/^\[\^(.+?)\]/', $Excerpt['text'], $matches))
        {
            $name = $matches[1];

            if ( ! isset($this->DefinitionData['Footnote'][$name]))
            {
                return;
            }

            $this->DefinitionData['Footnote'][$name]['count'] ++;

            if ( ! isset($this->DefinitionData['Footnote'][$name]['number']))
            {
                $this->DefinitionData['Footnote'][$name]['number'] = ++ $this->footnoteCount; # Â» &
            }
            if($this->pdf)
                $Element = array(
                    'name' => 'sup',
                    'handler' => 'element',
                    'text' => array(
                        'name' => 'span',
                        'text' => $this->DefinitionData['Footnote'][$name]['number'],
                    ),
                );
            else
                $Element = array(
                    'name' => 'sup',
                    'attributes' => array('id' => 'fnref'.$this->DefinitionData['Footnote'][$name]['count'].':'.$name),
                    'handler' => 'element',
                    'text' => array(
                        'name' => 'a',
                        'attributes' => array('href' => '#fn:'.$name, 'class' => 'footnote-ref'),
                        'text' => $this->DefinitionData['Footnote'][$name]['number'],
                    ),
                );

            return array(
                'extent' => strlen($matches[0]),
                'element' => $Element,
            );
        }
    }
    protected function buildFootnoteElement()
    {
        $Element = array(
            'name' => 'div',
            'attributes' => array('class' => 'footnotes'),
            'handler' => 'elements',
            'text' => array(
                array(
                    'name' => 'hr',
                ),
                array(
                    'name' => 'ol',
                    'handler' => 'elements',
                    'text' => array(),
                ),
            ),
        );

        uasort($this->DefinitionData['Footnote'], 'self::sortFootnotes');

        foreach ($this->DefinitionData['Footnote'] as $definitionId => $DefinitionData)
        {
            if ( ! isset($DefinitionData['number']))
            {
                continue;
            }

            $text = $DefinitionData['text'];

            $text = parent::text($text);

            $numbers = range(1, $DefinitionData['count']);

            $backLinksMarkup = '';

            foreach ($numbers as $number)
            {
                if($this->pdf)
                    $backLinksMarkup .= '';
                else
                    $backLinksMarkup .= ' <a href="#fnref'.$number.':'.$definitionId.'" rev="footnote" class="footnote-backref">&#8617;</a>';
            }

            $backLinksMarkup = substr($backLinksMarkup, 1);

            if (substr($text, - 4) === '</p>')
            {
                $backLinksMarkup = '&#160;'.$backLinksMarkup;

                $text = substr_replace($text, $backLinksMarkup.'</p>', - 4);
            }
            else
            {
                $text .= "\n".'<p>'.$backLinksMarkup.'</p>';
            }

            $Element['text'][1]['text'] []= array(
                'name' => 'li',
                'attributes' => array('id' => 'fn:'.$definitionId),
                'text' => "\n".$text."\n",
            );
        }

        return $Element;
    }
}